1. Overview
The Dogs Web API is a CRUD-enabled web application that allows users to view, add, edit, and delete dog breeds (and their sub-breeds) from a dataset. All changes must persist across sessions, and the solution should be publicly accessible via the internet.

The goal is to provide a simple yet robust interface—either GUI-based or API endpoints—that demonstrates sound backend and frontend engineering practices.

2. Objectives
Create a public-facing, HTTP-accessible application to manage the dogs.json dataset.

Implement Create, Read, Update, Delete (CRUD) functionality for breeds and sub-breeds.

Ensure persistent storage (changes remain after server restarts or page refreshes).

Host the solution online and share both the GitHub repository and live link.

3. Target Audience
Primary Users:
Hutchison Technologies R&D team (evaluation & interview process)

End Users:
Potential future use by pet owners, breeders, or dog breed enthusiasts for managing breed lists.

4. Functional Requirements
4.1 Core Features
Feature	Description
View Breeds	Fetch and display all dog breeds and sub-breeds from the database.
Add Breed/Sub-Breed	Allow users to create a new breed or add sub-breeds to an existing breed.
Edit Breed/Sub-Breed	Update breed or sub-breed names.
Delete Breed/Sub-Breed	Remove breeds or sub-breeds from the dataset.
Persistence	Data must remain consistent after browser close/reopen.

4.2 API Endpoints (Example)
GET /dogs → List all breeds and sub-breeds

POST /dogs → Add a new breed

PUT /dogs/:breed → Edit breed details

DELETE /dogs/:breed → Remove a breed

Optional: Sub-breed-specific endpoints (/dogs/:breed/:subbreed)

5. Non-Functional Requirements
Availability: Publicly accessible via browser or API client.

Performance: Should handle basic CRUD operations with minimal latency.

Security: Basic input validation and sanitization to prevent injection attacks.

Maintainability: Code should follow best practices and be well-documented.

Scalability: Able to extend to larger datasets or more complex breed attributes.

6. Technical Requirements
Backend: Node.js (Express) or Golang (as per Hutchison Tech stack preferences).

Frontend: Optional — React.js if GUI is implemented.

Database:

Option 1: SQLite / PostgreSQL for persistence.

Option 2: MongoDB (cloud-hosted for public access).

Hosting:

Free-tier services (Heroku, Render, Railway, Vercel, Netlify for frontend).

Version Control: GitHub (public repository).

Deployment Scripts: Include in repo for reproducibility.

7. Constraints
No paid services — must use free hosting and database solutions.

No full AI code generation — final code must reflect developer’s own skills.

Time frame: Suggested completion within 2 weeks.

8. Deliverables
GitHub Repository

Source code for backend (and frontend if included)

README.md with setup, usage, and deployment instructions

Build and deploy scripts

Live URL

Public access to the hosted Dogs Web API

Reflection Note (optional)

Challenges faced, architectural choices, possible improvements

9. Success Criteria
All CRUD operations work correctly.

Data persists across sessions.

Application is live and accessible without local setup.

Codebase is clean, maintainable, and demonstrates solid engineering practices.

